openapi: 3.0.3
info:
  title: Enterprise API
  description: |
    Comprehensive API for enterprise applications with authentication, 
    user management, and business operations.
  version: 1.0.0
  contact:
    name: API Support
    email: support@enterprise.com
    url: https://enterprise.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.enterprise.com/v1
    description: Production server
  - url: https://staging-api.enterprise.com/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Development server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get paginated list of users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get dashboard analytics
      description: Retrieve analytics data for the dashboard
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for analytics
          required: false
          schema:
            type: string
            enum: [day, week, month, quarter, year]
            default: month
      responses:
        "200":
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: securePassword123

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: securePassword123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: "#/components/schemas/User"
        expiresIn:
          type: integer
          example: 3600

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [admin, user, moderator]
          example: user
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pagination:
          $ref: "#/components/schemas/Pagination"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    AnalyticsResponse:
      type: object
      properties:
        period:
          type: string
          example: month
        metrics:
          type: object
          properties:
            totalUsers:
              type: integer
              example: 1250
            activeUsers:
              type: integer
              example: 890
            revenue:
              type: number
              format: float
              example: 125000.50
            conversionRate:
              type: number
              format: float
              example: 0.15
        charts:
          type: array
          items:
            $ref: "#/components/schemas/ChartData"

    ChartData:
      type: object
      properties:
        name:
          type: string
          example: User Growth
        type:
          type: string
          enum: [line, bar, pie, area]
          example: line
        data:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                example: Jan 2023
              value:
                type: number
                example: 100

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Validation failed
        message:
          type: string
          example: The provided data is invalid
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: Invalid email format
        timestamp:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
